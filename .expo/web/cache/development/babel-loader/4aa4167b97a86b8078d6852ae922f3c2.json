{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\React\\\\Thesis Project\\\\my-project\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent, Component, useRef, useState, useEffect } from \"react\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport renderer from \"react-test-renderer\";\nimport { diffString, diff } from \"json-diff\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      appState: AppState.currentState,\n      applicationName: \"\",\n      appJson: {},\n      randomColor: null\n    };\n\n    _this.getRandomColor = function () {\n      return \"rgb(\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \")\";\n    };\n\n    _this._handleAppStateChange = function (nextAppState) {\n      if (AppState.currentState.match(/active/)) {\n        var tree1 = renderer.create(React.createElement(App, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 37\n          }\n        })).toJSON();\n\n        _this.setState({\n          appJson: tree1\n        });\n\n        console.log(\"App has come to the foreground!\");\n      }\n\n      if (AppState.currentState.match(/inactive|background/)) {\n        _this.getRandomColor;\n        Linking.openURL(\"exp://192.168.10.106:19000\");\n      }\n\n      if (_this.state.appState.match(/inactive|background/) && nextAppState === \"active\") {\n        console.log(\"App has come to the foreground!\");\n        var tree = renderer.create(React.createElement(App, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 36\n          }\n        })).toJSON();\n        console.log(diffString(_this.state.appJson, tree));\n      }\n\n      _this.setState({\n        appState: nextAppState\n      });\n    };\n\n    _this.openApplication = function () {\n      var tree = renderer.create(React.createElement(App, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 34\n        }\n      })).toJSON();\n      console.log(tree);\n      return tree;\n    };\n\n    _this.generateRandomColor = function () {\n      _this.setState({\n        randomColor: _this.getRandomColor()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppState.addEventListener(\"change\", this._handleAppStateChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppState.addEventListener(\"change\", this._handleAppStateChange);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        randomColor: this.getRandomColor()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(diffString({}, {}));\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    padding: 30,\n    backgroundColor: \"#ffffff\"\n  },\n  input: {\n    width: 255,\n    height: 44,\n    padding: 10,\n    margin: 10,\n    backgroundColor: \"#FFF\",\n    borderColor: \"#000\",\n    borderRadius: 0.5,\n    borderWidth: 0.5\n  }\n});","map":{"version":3,"sources":["C:/React/Thesis Project/my-project/App.js"],"names":["React","PureComponent","Component","useRef","useState","useEffect","renderer","diffString","diff","App","state","appState","AppState","currentState","applicationName","appJson","randomColor","getRandomColor","Math","floor","random","_handleAppStateChange","nextAppState","match","tree1","create","toJSON","setState","console","log","Linking","openURL","tree","openApplication","generateRandomColor","addEventListener","styles","container","StyleSheet","flex","alignItems","padding","backgroundColor","input","width","height","margin","borderColor","borderRadius","borderWidth"],"mappings":"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","sourcesContent":["import React, {\n  PureComponent,\n  Component,\n  useRef,\n  useState,\n  useEffect,\n} from \"react\";\nimport {\n  AppState,\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Button,\n  Linking,\n} from \"react-native\";\nimport renderer from \"react-test-renderer\";\nimport { diffString, diff } from \"json-diff\";\n\nexport default class App extends Component {\n  state = {\n    appState: AppState.currentState,\n    applicationName: \"\",\n    appJson: {},\n    randomColor: null,\n  };\n\n  getRandomColor = () => {\n    return (\n      \"rgb(\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \")\"\n    );\n  };\n\n  componentDidMount() {\n    AppState.addEventListener(\"change\", this._handleAppStateChange);\n  }\n\n  componentWillUnmount() {\n    AppState.addEventListener(\"change\", this._handleAppStateChange);\n  }\n\n  _handleAppStateChange = (nextAppState) => {\n    if (AppState.currentState.match(/active/)) {\n      const tree1 = renderer.create(<App />).toJSON();\n      this.setState({ appJson: tree1 });\n      console.log(\"App has come to the foreground!\");\n    }\n\n    if (AppState.currentState.match(/inactive|background/)) {\n      this.getRandomColor;\n      Linking.openURL(\"exp://192.168.10.106:19000\");\n    }\n    if (\n      this.state.appState.match(/inactive|background/) &&\n      nextAppState === \"active\"\n    ) {\n      console.log(\"App has come to the foreground!\");\n      const tree = renderer.create(<App />).toJSON();\n      //console.log(tree);\n      console.log(diffString(this.state.appJson, tree));\n    }\n\n    this.setState({ appState: nextAppState });\n  };\n\n  openApplication = () => {\n    const tree = renderer.create(<App />).toJSON();\n    console.log(tree);\n\n    return tree;\n  };\n\n  componentWillMount() {\n    // getRandomColor method returns a new color code in RGB format so\n    // get new color code from getRandomColor function and save it in\n    // randomColor state variable.\n\n    this.setState({ randomColor: this.getRandomColor() });\n  }\n\n  //  function called on button click\n  generateRandomColor = () => {\n    this.setState({ randomColor: this.getRandomColor() });\n  };\n\n  render() {\n    console.log(diffString({}, {}));\n    return <View style={styles.container}></View>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    padding: 30,\n    backgroundColor: \"#ffffff\",\n  },\n  input: {\n    width: 255,\n    height: 44,\n    padding: 10,\n    margin: 10,\n    backgroundColor: \"#FFF\",\n    borderColor: \"#000\",\n    borderRadius: 0.5,\n    borderWidth: 0.5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}